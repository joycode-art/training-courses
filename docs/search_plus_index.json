{"./":{"url":"./","title":"Introduction","keywords":"","body":"Training Courses Visit : https://joycode-art.github.io/training-courses build your own install nodejs sudo apt-get install nodejs sudo apt-get install npm upgrade: sudo npm install npm -g npm install –g n stable modify repo: npm get registry npm config set registry http://registry.npm.taobao.org/ # npm config set registry https://registry.npmjs.org/ install gitbook npm install gitbook-cli -g gitbook -V install plugins gitbook install review book gitbook serve publish book to github pages rm -rf docs gitbook build mv _book docs git add ./docs git commit -m \"publish book\" git push generate book install ebook converter download Calibre: https://calibre-ebook.com/download install Calibre config Calibre MACOS: sudo ln -s ~/Applications/calibre.app/Contents/MacOS/ebook-convert /usr/bin Or: vi ~/.bash_profile export EBOOK_PATH=/Applications/calibre.app/Contents/MacOS export PATH=$PATH:$EBOOK_PATH source .bash_profile generate pdf gitbook pdf generate epub gitbook epub Copyright © joycode 2021 all right reserved，powered by GitbookFile Modify: 2021-01-04 11:54:36 "},"object-oriented-design.html":{"url":"object-oriented-design.html","title":"面向对象设计训练营","keywords":"","body":"面向对象设计训练营 培训简介 面向对象编程为软件设计提供了低成本的抽象建模手段和模块化手段，合理使用面向对象技术可以降低软件复杂度，提高软件的可理解性，因此大规模商业软件主流使用面向对象范式进行设计和编码。面向对象设计如今已发展出了完善的软件建模、设计原则、设计模式与实现模式，然而遗憾的是仍旧有不少程序员在用面向对象编程语言写着过程式的代码。本课程通过一系列编程练习和讲解，穿过面向对象表面上的原则和模式，一探软件设计的本质。通过讲解和练习面向对象设计和编码，让学员掌握面向对象的本质，写出更加易于扩展和理解的面向对象代码。 培训对象 具有一定编程经验（两年以上），掌握某一高级编程语言C，C++，Python，Go...，想要全面深刻的理解和使用面向对象设计、模式与开发的软件设计和开发人员。 培训时长 一天，8H 内容安排 面向对象编程范式简介 (0.5H) 面向对象编程的核心特点 (0.5H) 面向对象设计原则：SOLID讲解与举例 (1H) 面向对象设计模式与本质 (1H) 面向对象代码实现模式与编码 (2H) 面向对象架构模式：组件化架构与服务化架构 （1H） 面向对象软件建模与实践 (2H) 环境要求 培训环境：白板，白纸，白板笔，便利贴 学员演练环境： 操作系统：Windows，Linux或者MAC均可 IDE： VSCode，ecplise，IDEA均可 其它： 提前安装构建环境，另外掌握单元测试框架的用法：例如C++推荐gtest，Java推荐JUnit或其它xUnit框架均可； 培训历史 描述该培训在哪些客户有过培训，培训做过何种裁剪和修改； Copyright © joycode 2021 all right reserved，powered by GitbookFile Modify: 2021-01-04 16:28:25 "},"evolutionary-design.html":{"url":"evolutionary-design.html","title":"演进式设计训练营","keywords":"","body":"演进式设计训练营 演进式设计是一种应对变化的设计方法论，掌握演进式设计可以让软件设计做到迭代式交付、逐步求精，降低软件的交付风险。然而演进式设计对软件开发人员的编码设计能力有具体的要求。本训练营通过系列练习，让学员学习掌握演进式设计的核心技能要素，包括TDD、重构、自动化测试等，体验演进式的设计交付过程。 课程安排：课程安排：连续两天，包含理论和实践练习； 适合对象：软件开发人员，技术骨干； 能力要求：掌握一定面向对象基础，对设计原则和模式有一定了解； 编程语言：C，C++，Java，Go, Python等皆可，具体不限； 环境要求：搭建好对应语言的单元测试环境，并且安装git工具； 培训历史 合并演进式设计和领域建模的四天版的演练培训，给华为的海思麒麟开发部门以及华为数通产品线有培训过，深获好评。 Copyright © joycode 2021 all right reserved，powered by GitbookFile Modify: 2021-01-04 16:27:32 "},"refactoring.html":{"url":"refactoring.html","title":"重构训练营","keywords":"","body":"重构训练营 培训介绍 重构是在软件演进过程中防止软件腐化，保持软件持续低成本应对变化的必备技能。掌握正确的重构手法，工具和技巧才能保证重构做到小步安全，持续提交。本训练营通过理论和演练，帮助学员梳理纷繁复杂的重构手法，通过四种基本重构手法组合出其它的重构手法，通过两项原则操作保证每个重构步骤满足“等价操作、过程可逆、随时终止、断点续传”的特点。另外，辅导学员掌握手动重构以及利用现代化IDE的自动重构以及如何搭建满足重构需要的安全防护网； 课程安排：课程安排：连续两天，包含理论和实践练习； 适合对象：软件开发人员，技术骨干； 编程语言：C，C++，Java，Go, Python等皆可，具体不限； 培训历史 经本培训裁剪的《重构至领域模型》培训，通过一个完整的现场代码案例，演示如何从一个大泥球的设计和代码，经过42步重构操作，一步一步演进到一个领域模型驱动的，实现和模型设计保持一致的可灵活扩展的组件化架构； 该培训目前给华为的上海、成都、西安、南京和杭州研究所都有培训过； Copyright © joycode 2021 all right reserved，powered by GitbookFile Modify: 2021-01-04 16:24:31 "},"composite-design.html":{"url":"composite-design.html","title":"组合式设计训练营","keywords":"","body":"组合式设计训练营 软件设计的一个主要目标是追求长期低成本应对变化。组合式设计是设计学中应对变化的最佳设计范式，组合式设计的目的是让软件逐渐演进到素材库模式，在大多数场景下可以通过拼接素材来完成新的需求。组合式设计需要正交设计和演进式设计的支撑。该训练营通过一个存在诸多变化方向的练习，让参与者来体会和学习组合式设计的强大。 课程安排：课程安排：连续两天，包含理论和实践练习； 适合对象：软件开发人员，技术骨干； 能力要求：较好的掌握面向对象设计，了解正交设计原则和演进式设计，有一定TDD和重构的能力； 编程语言：面向对象语言，具体不限； 环境要求：搭建好对应语言的单元测试环境，并且安装git工具； Copyright © joycode 2021 all right reserved，powered by GitbookFile Modify: 2021-01-03 19:26:01 "},"concurrency-asynchrony.html":{"url":"concurrency-asynchrony.html","title":"并发与异步编程","keywords":"","body":"并发与异步编程 并发与异步编程在多核时代已经成为一种必备技能。从传统基于线程的各种互斥同步机制的编程模型，到基于协程、Actor和CSP并发模型，再到响应式编程和流式编程，本课程告诉你这些技术的发展过程、联系与差异，优势与劣势，以及在应用时有哪些最佳实践和原则去避免犯错和误用，最终可以更高效地使用这些技术手段解决问题。 课程安排：一天时间，包括理论、案例和实践练习； 适合对象：软件开发人员、技术骨干，以及任何需要在软件中进行使用并发编程的开发人员； 能力要求：对基本并发编程有一定了解； 编程语言：不限； Copyright © joycode 2021 all right reserved，powered by GitbookFile Modify: 2021-01-03 19:26:13 "},"programming-paradigm.html":{"url":"programming-paradigm.html","title":"多范式设计训练营","keywords":"","body":"多范式设计训练营 随着新的编程语言逐渐涌现，传统的主流语言也随之推出了自己的新版本，软件设计和编码逐步走入多范式融合的时代。本训练营针对这些新的语言特征和设计范式的变化，分门别类讲清楚每种特性、范式的适用场景以及如何有效使用。 课程安排：一天时间，具体内容如下，可以裁剪； 2H，函数式编程：函数式作为一种存在很久的编程范式，在多核和高并发时代被重新带回到人们的视野里。本部分着重讲解函数式编程范式到底能够解决什么问题，它对于并发到底是不是最合理的解决方案，我们应该如何在产品代码中合理地使用函数式编程同时规避函数式编程带来的问题； 2H，范畴论与编程：作为一门专门研究态射组合（即函数组合）的抽象代数，范畴论在编程领域，尤其是函数式编程领域起着至关重要的理论基础。通过本session，理解范畴学的知识架构、关键概念以及对程序设计的帮助，在此基础上讲清楚monad背后的原理； 2H，逻辑和类型系统是保证我们编写更加健壮代码的重要措施。之所以这一点成立，是因为背后有着坚实的逻辑学基础。本课程将介绍这二者之间的联系。参与者通过了解背后的联系，掌握如何利用类型系统构建更健壮的程序 2H，类型驱动设计：我们都已经熟悉测试驱动开发（Test Driven Development），而类型驱动开发（Type Driven Development）可以通过强大完善的类型系统构造更加有效的测试，却完全符合对Test Driven Development的理解。本session让参与者了解这种技术的背景和实践方式，构建高可靠的软件； 适合对象：软件开发人员、技术骨干、技术决策者； 编程语言：根据课程内容选择； Copyright © joycode 2021 all right reserved，powered by GitbookFile Modify: 2021-01-03 19:26:30 "},"embedded-cpp.html":{"url":"embedded-cpp.html","title":"大型嵌入式系统的C++设计与实现","keywords":"","body":"大型嵌入式系统的C++设计与实现 大型嵌入式的软硬件系统面临巨大的挑战，其设计存在上下文约束，包括实时性、资源受限，可靠性、安全性。C++是一门多范式的程序设计语言，包含众多的设计工具。在特定的设计约束上下文下，以解决领域问题为核心寻找合理的设计工具存在挑战。通过本课程，帮助学员熟悉在大型嵌入式系统设计过程灵活应用C++的设计工具，包括抽象、封装、多态、内存管理、代码膨胀控制，及其依赖管理的最佳实践和实现模式。 课程安排：半天的理论课程加案例介绍； 培训对象：团队技术骨干、架构师、业务分析师； 能力要求：具备一定的软件设计开发经验； 编程语言：现代C++； Copyright © joycode 2021 all right reserved，powered by GitbookFile Modify: 2021-01-03 19:26:43 "},"system-programming-languages.html":{"url":"system-programming-languages.html","title":"系统级编程语言训练营","keywords":"","body":"系统级编程语言训练营 目前，主流系统编程语言包括Go，Rust和现代C/C++，这三门系统编程语言在ICT领域具有强大的生命力和生态环境。遗憾的是，大多程序员只熟悉C/C++一门系统编程语言，且标准陈旧，知识更新慢。通过本次课程，重点探索系统编程领域中存在的通用范式，包括面向对象、函数式设计，包管理、依赖管理、泛型编程、并发编程等核心知识，帮助学员正确掌握系统编程的实现模式和最佳实践。 课程安排：一天的理论课程+一天编程练习； 适应对象：团队技术骨干、架构师、业务分析师； 能力要求：具备一定的系统软件开发经验； 编程语言：现代C/C++，Go，Rust； Copyright © joycode 2021 all right reserved，powered by GitbookFile Modify: 2021-01-03 19:26:59 "},"developer-test.html":{"url":"developer-test.html","title":"大型遗留系统的开发者测试实践","keywords":"","body":"大型遗留系统的开发者测试实践 在大型遗留系统中开展有效的开发者测试存在巨大的技术挑战。例如：混乱的头文件，复杂的依赖关系，脆弱的测试用例，复杂的测试用例，前置条件构造复杂，数据依赖，用例隔离性差，随处可见的Mock等等。因此，搭建有效的测试框架，并设计稳定的测试用例，挖掘潜在的领域模型，及其设计良好表达力的用例，是本次课程的主题。通过本次课程，旨在教会学员正确应用测试的基本理论和方法，并实践有效的开发者测试技术。 课程安排：一天的理论课程+一天编程练习； 适应对象：团队技术骨干、架构师、业务分析师； 能力要求：具备一定的系统软件开发经验； 编程语言：现代C/C++, CMake； Copyright © joycode 2021 all right reserved，powered by GitbookFile Modify: 2021-01-03 19:27:13 "},"building-system-design.html":{"url":"building-system-design.html","title":"系统编程的构建系统设计","keywords":"","body":"系统编程的构建系统设计 在系统编程领域，构建系统具有高度的复杂度。但是，大部分系统编程的程序员缺失构建知识的了解，导致真实系统的构建系统复杂度日益剧增，制约团队改善工程效率。通过本次课程，重点介绍Bazel和CMake 2.0构建系统的基本用法和最佳实践，通过真实案例了解大型系统的构建系统组织与管理机制。 课程安排：半天理论课程+半天编程练习； 适应对象：团队技术骨干、架构师、业务分析师； 能力要求：具备一定的系统软件开发经验； 编程语言：现代C/C++, CMake； Copyright © joycode 2021 all right reserved，powered by GitbookFile Modify: 2021-01-03 19:27:26 "},"domain-driven-design.html":{"url":"domain-driven-design.html","title":"领域驱动设计训练营","keywords":"","body":"领域驱动设计训练营 领域驱动设计被证明是当今解决复杂软件的核心设计实践之一，甚至被认为是合理设计微服务架构的必备技能。遗憾的是很多架构师在学习和实践领域驱动设计的时候普遍觉得晦涩和无处着手。本课程帮你讲清楚什么是领域驱动设计，它来自何处，核心解决了哪些问题，如何解决这些问题，以及如何在真实项目中进行落地实践。帮助学员开始在产品软件的设计开发过程中开始使用这一设计实践。 课程安排：两天，理论讲解、设计编码练习、实战案例介绍； 适应对象：团队技术骨干、架构师、业务分析师； 能力要求：具备一定的软件设计开发经验； 编程语言：不限； 培训历史 该培训目前给华为的成都和松山湖研究所有培训过； Copyright © joycode 2021 all right reserved，powered by GitbookFile Modify: 2021-01-04 16:25:35 "},"dci-architecture.html":{"url":"dci-architecture.html","title":"DCI架构","keywords":"","body":"DCI架构 DCI架构是一种新的面向领域的软件架构模式。应用这一模式可以解决领域建模中数据边界和行为边界不一致的问题，在架构上保持核心领域代码的高内聚低耦合，以解决传统领域建模中出现的贫血和充血模型的问题。DCI是面向对象软件架构的新发展，结合领域驱动设计使用，可以让软件架构支撑更大的单体架构，从大的层面保持软件架构的可扩展性和可理解性。 课程安排：半天，理论课程加案例介绍； 适应对象：团队技术骨干、架构师、业务分析师； 能力要求：具备一定的软件设计开发经验； 编程语言：不限； Copyright © joycode 2021 all right reserved，powered by GitbookFile Modify: 2021-01-03 19:27:52 "},"micro-service.html":{"url":"micro-service.html","title":"微服务设计","keywords":"","body":"微服务设计 微服务是当前最流行的软件架构模式。人们期望通过对单体架构的微服务拆分，获得微服务传说中的种种好处，可现实中比比皆是糟糕的服务拆分，并由此带来的种种架构问题和运维难题。微服务到底如何设计才合理，什么样类型的软件适合微服务拆分，微服务的合理边界在哪里，背后的原则又是什么？本课程通过理论以及成功和失败案例介绍，帮学员理清楚如何做才是合理的微服务。 课程安排：半天的理论课程加案例介绍； 适应对象：团队技术骨干、架构师、业务分析师； 能力要求：具备一定的软件设计开发经验； 编程语言：不限； Copyright © joycode 2021 all right reserved，powered by GitbookFile Modify: 2021-01-03 19:28:05 "},"deep-learning.html":{"url":"deep-learning.html","title":"深度学习理论与工程实践训练营","keywords":"","body":"深度学习理论与工程实践训练营 目前，以深度学习为代表的人工智能技术得到了快速发展和商业应用，而掌握人工智能理论知识和工程实践则构成了巨大的技术门槛。通过本次课程，介绍人工智能的基本理论知识，尤其是深度学习的理论知识，掌握常见的机器学习算法，理解反向传播算法的基本原理。掌握常见机器学习模型，包括线性模型，多层感知器，卷积神经网络，递归神经网络和图神经网络。最后，通过了解TensorFlow内核，理解模型训练和推理的基本过程和工程实践方法，帮助学员全面掌握AI的理论基础和工程实践方法。 课程安排：一天的理论课程+一天编程练习； 适应对象：AI算法工程师，系统工程师； 能力要求：具备概率统计理论基础； 编程语言：Python，C++； Copyright © joycode 2021 all right reserved，powered by GitbookFile Modify: 2021-01-03 19:28:23 "},"performance-optimization.html":{"url":"performance-optimization.html","title":"嵌入式系统软件性能优化","keywords":"","body":"嵌入式系统软件性能优化 Copyright © joycode 2021 all right reserved，powered by GitbookFile Modify: 2021-01-03 20:29:45 "}}